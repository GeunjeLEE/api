syntax = "proto3";

package spaceone.api.notification.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service ProjectChannel {
    // desc: Creates a new Project Channel.
    // Project channel is the definition of the channel that delivers the notification to the project when the notification is created.
    // When creating a Project Channel, one of the protocols must be selected, and an notification is dispatched through the selected protocol.
    rpc create (CreateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { post: "/notification/v1/project-channels" };
    }
    // desc: Updates a Project Channel information.
    // Protocol that has already been set cannot be changed. Instead, the data required to be dispatched notification for project channel is can be updated.
    rpc update (UpdateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}" };
    }
    // desc: Schedule settings for project channels.
    // When a notification is created, you can set the day and time you want to receive it through the schedule.
    // When you set the day of the week in the schedule, you can receive a notification only on the set day of the week.
    // If you also set the start time and end time with day of the week, you can receive a notification only at the set time on the set day of the week.
    // If there is no schedule, notifications will be dispatched at all times through project channel.
    rpc set_schedule (UpdateProjectChannelScheduleRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/schedule" };
    }
    // desc: Subscription settings for project channels
    // If the project channel have subscriptions, notification is dispatched only if the topic of the notification is the same as the one set in the subscriptions.
    // If no subscriptions in project channel, notifications will be dispatched all.
    rpc set_subscription (UpdateProjectChannelSubscriptionRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/subscription" };
    }
    // desc: Enables a Project Channel.
    // If the disabled project channel is enabled, the project channel can be used again and the notification can be dispatched.
    // Even if the project channel is enabled, if the protocol being used in the project channel is disabled, the notification is not dispatched.
    rpc enable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/enable" };
    }
    // desc: Disables a Project Channel.
    // If you disable the project channel, the notification will not be dispatched, even if they are created.
    rpc disable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/disable" };
    }
    // desc: Delete the Project Channel.
    rpc delete (ProjectChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/notification/v1/project-channel/{project_channel_id}" };
    }
    // desc: Gets a single Project Channel.
    rpc get (GetProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { get: "/notification/v1/project-channel/{project_channel_id}" };
    }
    // desc: Lists the specified Project Channel.
    // Can search information using the query format provided by SpaceONE.
    // Detailed information about Query format can be checked in the Search Query pages.
    rpc list (ProjectChannelQuery) returns (ProjectChannelsInfo) {
        option (google.api.http) = {
            get: "/notification/v1/project-channels"
            additional_bindings {
                post: "/notification/v1/project-channels/search"
            }
        };
    }
    rpc stat (ProjectChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/notification/v1/project-channels/stat" };
    }
}

enum NotificationLevel {
    NONE = 0;
    LV1 = 1;
    LV2 = 2;
    LV3 = 3;
    LV4 = 4;
    LV5 = 5;
}

message ProjectChannelSchedule {
    enum DayOfWeek {
        NONE = 0;
        MON = 1;
        TUE = 2;
        WED = 3;
        THU = 4;
        FRI = 5;
        SAT = 6;
        SUN = 7;
    }
    // desc: Day of the week to be notified.
    // As a list type, only types that can be specified from MON to SUN can be set.
    repeated DayOfWeek day_of_week = 1;
    // desc: Start time to receive notifications.
    // Only integer type can be set, and 0 to 23 can be.
    int32 start_hour = 2;
    // desc: End time to receive notifications.
    // Only integer type can be set, and 1 to 24 can be.
    int32 end_hour = 3;
}

message CreateProjectChannelRequest {
    // is_required: true
    // desc: The ID of protocol that will be set in project channel.
    string protocol_id = 1;
    // is_required: true
    // desc: The name of Project Channel. It can have a maximum of 255 characters.
    string name = 2;
    // is_required: true
    // desc: The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // is_required: false
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 4;
    // is_required: false
    // desc: When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    repeated string subscriptions = 5;
    // is_required: false
    // desc: Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    NotificationLevel notification_level = 6;
    // is_required: false
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 7;
    // is_required: false
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 8;
    // is_required: false
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 9;
    // is_required: true
    // desc: The ID of project to which the project channel belongs.
    string project_id = 21;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 22;
}

message UpdateProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: false
    // desc: The name of Project Channel. It can have a maximum of 255 characters.
    string name = 2;
    // is_required: false
    // desc: The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // is_required: false
    // desc: Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    NotificationLevel notification_level = 5;
    // is_required: false
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 7;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message UpdateProjectChannelScheduleRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 2;
    // is_required: false
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 3;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 4;
}

message UpdateProjectChannelSubscriptionRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 2;
    // is_required: false
    // desc: When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    repeated string subscriptions = 3;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 4;
}

message ProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message GetProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
    // is_required: false
    // desc: The list of the project channel information column you want to be returned. It must be specified in the ProjectChannelInfo.
    repeated string only = 3;
}

message ProjectChannelQuery {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    // is_required: false
    // desc: Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    // desc: The ID of project channel.
    string project_channel_id = 2;
    // is_required: false
    // desc: The name of project channel.
    string name = 3;
    // is_required: false
    // desc: The state of project channel. ENABLED or DISABLED only.
    ProjectChannelState state = 4;
    // is_required: false
    // The ID of secret encrypted data in the security service
    string secret_id = 5;
    // is_required: false
    // desc: The level of notification.
    NotificationLevel notification_level = 6;
    // is_required: false
    // desc: The ID of protocol set in the project channel.
    string protocol_id = 11;
    // is_required: false
    // desc: The ID of project to which the project channel belongs.
    string project_id = 12;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 13;
}

message ProjectChannelInfo {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // desc: The name of project channel
    string name = 2;
    // desc: The state of project channel. ENABLED or DISABLED only.
    ProjectChannelState state = 3;
    // desc: The data for using project channel.
    google.protobuf.Struct data = 4;
    // The ID of secret encrypted data in the security service
    string secret_id = 5;
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 6;
    // desc: The topic list to subscription.
    repeated string subscriptions = 7;
    // desc: Set the level of notification.
    NotificationLevel notification_level = 8;
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 9;
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 10;
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 11;
    // desc: The ID of protocol set in the project channel.
    string protocol_id = 21;
    // desc: The ID of project to which the project channel belongs.
    string project_id = 22;
    // desc: The ID of domain.
    string domain_id = 23;
    // desc: Project channel creation time.
    string created_at = 31;
}

message ProjectChannelsInfo {
    // desc : List of queried project channels.
    repeated ProjectChannelInfo results = 1;
    // desc : Total counts of queried project channels.
    int32 total_count = 2;
}

message ProjectChannelStatQuery {
    // is_required: true
    // desc: Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}