syntax = "proto3";

package spaceone.api.repository.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/repository/v1/repository.proto";


service Schema {
    rpc create (CreateSchemaRequest) returns (SchemaInfo) {
        option (google.api.http) = { post: "/repository/v1/schemas" };
    }
    rpc update (UpdateSchemaRequest) returns (SchemaInfo) {
        option (google.api.http) = { put: "/repository/v1/schema/{schema}" };
    }
    rpc delete (SchemaRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/repository/v1/schema/{schema}" };
    }
    rpc get (GetRepositorySchemaRequest) returns (SchemaInfo) {
        option (google.api.http) = { get: "/repository/v1/schemas/{schema}" };
    }
    rpc list (SchemaQuery) returns (SchemasInfo) {
        option (google.api.http) = {
            get: "/repository/v1/schemas"
            additional_bindings {
                post: "/repository/v1/schemas/search"
            }
        };
    }
    rpc stat (SchemaStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/repository/v1/schemas/stat" };
    }
}

message CreateSchemaRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string service_type = 2;
    // is_required: true
    string schema_id = 3;
    // is_required: true
    google.protobuf.Struct schema = 11;
    // is_required: false
    google.protobuf.ListValue labels = 12;
    // is_required: false
    google.protobuf.Struct tags = 13;
    // is_required: false
    string project_id = 21;
    // is_required: true
    string domain_id = 22;
}

message UpdateSchemaRequest {
    // is_required: true
    string name = 1;
    // is_required: false
    google.protobuf.Struct schema = 11;
    // is_required: false
    google.protobuf.ListValue labels = 12;
    // is_required: false
    google.protobuf.Struct tags = 13;
    // is_required: true
    string domain_id = 21;
}

message SchemaRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    string schema_id = 3;
}

message GetRepositorySchemaRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    string repository_id = 3;
    // is_required: false
    repeated string only = 4;
    // is_required: false
    string schema_id = 5;
}

message SchemaQuery {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    string service_type = 3;
    // is_required: true
    string project_id = 4;
    // is_required: true
    string repository_id = 5;
    // is_required: true
    string domain_id = 6;
    // is_required: false
    string schema_id = 7;
    // is_required: false
    State state = 8;
}

message SchemaInfo {
    string name = 1;
    string service_type = 2;
    string schema_id = 3;

    google.protobuf.Struct schema = 11;
    google.protobuf.ListValue labels = 12;
    google.protobuf.Struct tags = 13;

    RepositoryInfo repository_info = 21;
    string project_id = 22;
    string domain_id = 23;

    string created_at = 31;
    string updated_at = 32;
}

message SchemasInfo {
    repeated SchemaInfo results = 1;
    int32 total_count = 2;
}

message SchemaStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string repository_id = 2;
    // is_required: true
    string domain_id = 3;
}