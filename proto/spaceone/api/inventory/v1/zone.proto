syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/inventory/v1/region.proto";


service Zone {
    rpc create (CreateZoneRequest) returns (ZoneInfo) {
        option (google.api.http) = { post: "/inventory/v1/zones" };
    }
    rpc update (UpdateZoneRequest) returns (ZoneInfo) {
        option (google.api.http) = { put: "/inventory/v1/zone/{zone_id}" };
    }
    rpc delete (ZoneRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/zone/{zone_id}" };
    }
    rpc get (GetZoneRequest) returns (ZoneInfo) {
        option (google.api.http) = { get: "/inventory/v1/zone/{zone_id}" };
    }
    rpc add_member (ZoneMemberRequest) returns (ZoneMemberInfo) {
        option (google.api.http) = { get: "/inventory/v1/zone/{zone_id}/members" };
    }
    rpc modify_member (ZoneMemberRequest) returns (ZoneMemberInfo) {
        option (google.api.http) = { get: "/inventory/v1/zone/{zone_id}/member/{user_id}" };
    }
    rpc remove_member (RemoveZoneMemberRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { get: "/inventory/v1/zone/{zone_id}/member/{user_id}" };
    }
    rpc list_members (ZoneMemberQuery) returns (ZoneMembersInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/zone/{zone_id}/members"
            additional_bindings {
                post: "/inventory/v1/zone/{zone_id}/members/search"
            }
        };
    }
    rpc list (ZoneQuery) returns (ZonesInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/zones"
            additional_bindings {
                post: "/inventory/v1/zones/search"
            }
        };
    }
    rpc stat (ZoneStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/zones/stat" };
    }
}

message CreateZoneRequest {
    string name = 1;                        // required
    string region_id = 2;                   // required
    string domain_id = 3;                   // required
    google.protobuf.Struct tags = 4;        // optional
}

message UpdateZoneRequest {
    string zone_id = 1;                     // required
    string name = 2;                        // optional
    google.protobuf.Struct tags = 3;        // optional
    string domain_id = 4;                   // required
}

message ZoneRequest {
    string zone_id = 1;                     // required
    string domain_id = 2;                   // required
}

message GetZoneRequest {
    string zone_id = 1;                     // required
    string domain_id = 2;                   // required
    repeated string only = 3;               // optional
}

message ZoneQuery {
    string zone_id = 1;                     // optional
    string region_id = 2;                   // optional
    spaceone.api.core.v1.Query query = 3;   // optional
    string name = 4;                        // optional
    string domain_id = 5;                   // required
}

message ZoneInfo {
    enum State {
        NONE = 0;
        ACTIVE = 1;
        DELETED = 2;
    }

    string zone_id = 1;
    string name = 2;
    State state = 3;
    google.protobuf.Struct tags = 4;
    RegionInfo region_info = 5;
    string domain_id = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp deleted_at = 8;
}

message ZonesInfo {
    repeated ZoneInfo results = 1;
    int32 total_count = 2;
}

message ZoneMemberRequest {
    string zone_id = 1;                     // required
    string user_id = 2;                     // required
    repeated string labels = 3;             // optional
    string domain_id = 4;                   // required
}

message RemoveZoneMemberRequest {
    string zone_id = 1;                     // required
    string user_id = 2;                     // required
    string domain_id = 3;                   // required
}

message ZoneMemberQuery {
    spaceone.api.core.v1.Query query = 1;   // optional
    string zone_id = 2;                     // optional
    string user_id = 3;                     // optional
    string domain_id = 4;                   // required
}

message ZoneMemberInfo {
    ZoneInfo zone_info = 1;
    google.protobuf.Struct user_info = 2;
    repeated string labels = 3;
}

message ZoneMembersInfo {
    repeated ZoneMemberInfo results = 1;
    int32 total_count = 2;
}

message ZoneStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;     // required
    string domain_id = 2;                               // required
}