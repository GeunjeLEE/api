syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/inventory/v1/region.proto";


service CloudService {
    rpc create (CreateServiceRequest) returns (CloudServiceInfo) {
        option (google.api.http) = { post: "/inventory/v1/cloud-services" };
    }
    rpc update (UpdateCloudServiceRequest) returns (CloudServiceInfo) {
        option (google.api.http) = { put: "/inventory/v1/cloud-service/{cloud_service_id}" };
    }
    rpc pin_data (PinCloudServiceDataRequest) returns (CloudServiceInfo) {
        option (google.api.http) = { put: "/inventory/v1/cloud-service/{cloud_service_id}/pin-data" };
    }
    rpc delete (CloudServiceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/cloud-service/{cloud_service_id}" };
    }
    rpc get (GetCloudServiceRequest) returns (CloudServiceInfo) {
        option (google.api.http) = { get: "/inventory/v1/cloud-service/{cloud_service_id}" };
    }
    rpc list (CloudServiceQuery) returns (CloudServicesInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/cloud-services"
            additional_bindings {
                post: "/inventory/v1/cloud-services/search"
            }
        };
    }
    rpc stat (CloudServiceStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/cloud-services/stat" };
    }
}


message CloudServiceReference {
    string resource_id = 1;
    string external_link = 2;
}

message CreateServiceRequest {
    /*
    is_required: true
    desc:
    */
    string cloud_service_type = 1;
    /*
    is_required: true
    desc:
    */
    string provider = 2;
    /*
    is_required: false
    desc:
    */
    string cloud_service_group = 3;
    /*
    is_required: true
    desc:
    */
    google.protobuf.Struct data = 11;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct metadata = 12;
    /*
    is_required: false
    desc:
    */
    CloudServiceReference reference = 13;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 14;
    /*
    is_required: false
    desc:
    */
    string region_id = 21;
    /*
    is_required: false
    desc:
    */
    string project_id = 22;
    /*
    is_required: true
    desc:
    */
    string domain_id = 23;
}

message UpdateCloudServiceRequest {
    /*
    is_required: true
    desc:
    */
    string cloud_service_id = 1;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct data = 11;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct metadata = 12;
    /*
    is_required: false
    desc:
    */
    CloudServiceReference reference = 13;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 14;
    /*
    is_required: false
    desc:
    */
    string region_id = 21;
    /*
    is_required: false
    desc:
    */
    string project_id = 22;
    /*
    is_required: true
    desc:
    */
    string domain_id = 23;
    /*
    is_required: false
    desc:
    */
    bool release_project = 30;
    /*
    is_required: false
    desc:
    */
    bool release_region = 31;
}

message PinCloudServiceDataRequest {
    /*
    is_required: true
    desc:
    */
    string cloud_service_id = 1;
    /*
    is_required: true
    desc:
    */
    repeated string keys = 2;
    /*
    is_required: true
    desc:
    */
    string domain_id = 3;
}

message CloudServiceRequest {
    /*
    is_required: true
    desc:
    */
    string cloud_service_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}

message GetCloudServiceRequest {
    /*
    is_required: true
    desc:
    */
    string cloud_service_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
    /*
    is_required: false
    desc:
    */
    repeated string only = 3;
}

message CloudServiceQuery {
    /*
    is_required: false
    desc:
    */
    spaceone.api.core.v1.Query query = 1;
    /*
    is_required: false
    desc:
    */
    string cloud_service_id = 2;
    /*
    is_required: false
    desc:
    */
    string cloud_service_type = 3;
    /*
    is_required: false
    desc:
    */
    string provider = 4;
    /*
    is_required: false
    desc:
    */
    string cloud_service_group = 5;
    /*
    is_required: false
    desc:
    */
    string region_id = 21;
    /*
    is_required: false
    desc:
    */
    string project_id = 24;
    /*
    is_required: false
    desc:
    */
    string domain_id = 25;
}

message CloudServiceInfo {
    string cloud_service_id = 1;
    string cloud_service_type = 2;
    string provider = 3;
    string cloud_service_group = 4;
    string state = 5;

    google.protobuf.Struct data = 11;
    google.protobuf.Struct metadata = 12;
    CloudServiceReference reference = 13;
    google.protobuf.Struct tags = 14;
    google.protobuf.Struct collection_info = 15;

    RegionInfo region_info = 21;
    string project_id = 22;
    string domain_id = 23;

    google.protobuf.Timestamp created_at = 31;
    google.protobuf.Timestamp updated_at = 32;
    google.protobuf.Timestamp deleted_at = 33;
}

message CloudServicesInfo {
    repeated CloudServiceInfo results = 1;
    int32 total_count = 2;
}

message CloudServiceStatQuery {
    /*
    is_required: true
    desc:
    */
    spaceone.api.core.v1.StatisticsQuery query = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}