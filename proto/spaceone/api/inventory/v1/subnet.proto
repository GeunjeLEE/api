syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/inventory/v1/region.proto";
import "spaceone/api/inventory/v1/zone.proto";
import "spaceone/api/inventory/v1/network.proto";
import "spaceone/api/inventory/v1/network_type.proto";
import "spaceone/api/inventory/v1/network_policy.proto";


service Subnet {
    rpc create (CreateSubnetRequest) returns (SubnetInfo) {
        option (google.api.http) = { post: "/inventory/v1/subnets" };
    }
    rpc update (UpdateSubnetRequest) returns (SubnetInfo) {
        option (google.api.http) = { put: "/inventory/v1/subnet/{subnet_id}" };
    }
    rpc pin_data (PinSubnetDataRequest) returns (SubnetInfo) {
        option (google.api.http) = { put: "/inventory/v1/subnet/{subnet_id}/pin-data" };
    }
    rpc delete (SubnetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/subnet/{subnet_id}" };
    }
    rpc get (GetSubnetRequest) returns (SubnetInfo) {
        option (google.api.http) = { get: "/inventory/v1/subnet/{subnet_id}" };
    }
    rpc list (SubnetQuery) returns (SubnetsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/subnets"
            additional_bindings {
                post: "/inventory/v1/subnets/search"
            }
        };
    }
    rpc stat (SubnetStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/subnets/stat" };
    }
}

message IPRange {
    string start = 1;
    string end = 2;
}

message SubnetReference {
    string resource_id = 1;
    string external_link = 2;
}

message CreateSubnetRequest {
    /*
    is_required: true
    desc:
    */
    string cidr = 1;
    /*
    is_required: false
    desc:
    */
    string name = 2;
    /*
    is_required: false
    desc:
    */
    repeated IPRange ip_ranges = 3;
    /*
    is_required: false
    desc:
    */
    string gateway = 4;
    /*
    is_required: false
    desc:
    */
    int32 vlan = 5;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct data = 11;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct metadata = 12;
    /*
    is_required: false
    desc:
    */
    SubnetReference reference = 13;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 14;
    /*
    is_required: true
    desc:
    */
    string network_id = 21;
    /*
    is_required: true
    desc:
    */
    string network_type_id = 22;
    /*
    is_required: false
    desc:
    */
    string network_policy_id = 23;
    /*
    is_required: true
    desc:
    */
    string project_id = 24;
    /*
    is_required: true
    desc:
    */
    string domain_id = 25;
}

message UpdateSubnetRequest {
    /*
    is_required: true
    desc:
    */
    string subnet_id = 1;
    /*
    is_required: false
    desc:
    */
    string name = 2;
    /*
    is_required: false
    desc:
    */
    repeated IPRange ip_ranges = 3;
    /*
    is_required: false
    desc:
    */
    string gateway = 4;
    /*
    is_required: false
    desc:
    */
    int32 vlan = 5;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct data = 11;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct metadata = 12;
    /*
    is_required: false
    desc:
    */
    SubnetReference reference = 13;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 14;
    /*
    is_required: false
    desc:
    */
    string network_type_id = 21;
    /*
    is_required: false
    desc:
    */
    string network_policy_id = 22;
    /*
    is_required: false
    desc:
    */
    string project_id = 23;
    /*
    is_required: true
    desc:
    */
    string domain_id = 24;
    /*
    is_required: false
    desc:
    */
    bool release_project = 31;
}

message PinSubnetDataRequest {
    /*
    is_required: true
    desc:
    */
    string subnet_id = 1;
    /*
    is_required: true
    desc:
    */
    repeated string keys = 2;
    /*
    is_required: true
    desc:
    */
    string domain_id = 3;
}

message SubnetRequest {
    /*
    is_required: true
    desc:
    */
    string subnet_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}

message GetSubnetRequest {
    /*
    is_required: true
    desc:
    */
    string subnet_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
    /*
    is_required: false
    desc:
    */
    repeated string only = 3;
}

message SubnetQuery {
    /*
    is_required: false
    desc:
    */
    spaceone.api.core.v1.Query query = 1;
    /*
    is_required: false
    desc:
    */
    string subnet_id = 2;
    /*
    is_required: false
    desc:
    */
    string name = 3;
    /*
    is_required: false
    desc:
    */
    string cidr = 4;
    /*
    is_required: false
    desc:
    */
    string gateway = 5;
    /*
    is_required: false
    desc:
    */
    int32 vlan = 6;
    /*
    is_required: false
    desc:
    */
    string network_id = 11;
    /*
    is_required: false
    desc:
    */
    string network_type_id = 12;
    /*
    is_required: false
    desc:
    */
    string network_policy_id = 13;
    /*
    is_required: false
    desc:
    */
    string zone_id = 14;
    /*
    is_required: false
    desc:
    */
    string region_id = 15;
    /*
    is_required: false
    desc:
    */
    string project_id = 16;
    /*
    is_required: true
    desc:
    */
    string domain_id = 17;
}

message SubnetInfo {
    enum State {
        NONE = 0;
        AVAILABLE = 1;
        ALLOCATED = 2;
        RESERVED = 3;
    }

    string subnet_id = 1;
    string name = 3;
    string cidr = 4;
    repeated IPRange ip_ranges = 5;
    string gateway = 6;
    int32 vlan = 7;

    google.protobuf.Struct data = 11;
    google.protobuf.Struct metadata = 12;
    SubnetReference reference = 13;
    google.protobuf.Struct tags = 14;
    google.protobuf.Struct collection_info = 15;

    NetworkInfo network_info = 21;
    NetworkTypeInfo network_type_info = 22;
    NetworkPolicyInfo network_policy_info = 23;
    RegionInfo region_info = 24;
    ZoneInfo zone_info = 25;
    string project_id = 26;
    string domain_id = 27;

    google.protobuf.Timestamp created_at = 31;
}

message SubnetsInfo {
    repeated SubnetInfo results = 1;
    int32 total_count = 2;
}

message SubnetStatQuery {
    /*
    is_required: true
    desc:
    */
    spaceone.api.core.v1.StatisticsQuery query = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}