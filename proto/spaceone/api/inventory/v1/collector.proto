syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";

service Collector {
    rpc create (CreateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { post: "/inventory/v1/collectors" };
    }
    rpc update (UpdateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}" };
    }
    rpc delete (CollectorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/collector/{collector_id}" };
    }
    rpc get (GetCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}" };
    }
    rpc enable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/enable" };
    }
    rpc disable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/disable" };
    }
    rpc list (CollectorQuery) returns (CollectorsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/collectors"
            additional_bindings {
                post: "/inventory/v1/collectors/search"
            }
        };
    }
    rpc stat (CollectorStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/collectors/stat" };
    }
    rpc collect (CollectRequest) returns (JobInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/collect" };
    }
    rpc verify_plugin (VerifyPluginRequest) returns (VerifyInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/plugin/verify" };
    }

    rpc add_schedule (CreateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule" };
    }
    rpc get_schedule (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc update_schedule (UpdateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc delete_schedule (DeleteScheduleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete : "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc list_schedules (ScheduleQuery) returns (SchedulesInfo) {
         option (google.api.http) = {
            get: "/inventory/v1/collector/{collector_id}/schedules"
            additional_bindings {
                post: "/inventory/v1/collector/{collector_id}/schedules/search"
            }
        };
    }
}

message PluginInfo {
    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    string secret_id = 4;
    string secret_group_id = 5;
    string provider = 6;
}

message CreateCollectorRequest {
    string name = 1;                        // required
    PluginInfo plugin_info = 2; 			// required
    int32  priority = 3;                    // optional
    google.protobuf.Struct tags = 5;        // optional
    string domain_id = 6;                   // required
}

message UpdateCollectorRequest {
	string collector_id = 1;				// required
    string name = 2;                        // required
    PluginInfo plugin_info = 3; 			// required
    int32  priority = 4;                    // optional
    google.protobuf.Struct tags = 6;        // optional
    string domain_id = 7;                   // required
}

message CollectorRequest {
    string collector_id = 1;                // required
	string domain_id = 2;					// required
}

message GetCollectorRequest {
    string collector_id = 1;                // required
	string domain_id = 2;					// required
    repeated string only = 3;               // optional
}

message CollectorQuery {
	enum State {
		NONE = 0;
		ENABLED = 1;
		DISABLED = 2;
	}

    spaceone.api.core.v1.Query query = 1;
	string collector_id = 2;
    string name = 3;
    State state = 4;
    int32 priority = 5;
    string plugin_id = 6;
    string domain_id = 7;
}

// TODO: more fields
message CollectRequest {
    string collector_id = 1;
    google.protobuf.Struct filter = 2;
    string secret_id = 3;
    string collect_mode = 4;
    string domain_id = 5;
    bool use_cache = 6;             // optional
}

message VerifyPluginRequest {
    string collector_id = 1;            // required
    string secret_id = 2;           // required
    string domain_id = 3;           
}
message CollectorInfo {
	enum State {
		NONE = 0;
		ENABLED = 1;
		DISABLED = 2;
	}
	string collector_id = 1;
    string name = 2;
	State state = 3;
    PluginInfo plugin_info = 4;
    int32  priority = 5;
    google.protobuf.Struct tags = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp last_collected_at = 9;
    string domain_id = 10;
    string provider = 11;
    google.protobuf.Struct capability = 12;
}

message CollectorsInfo {
    repeated CollectorInfo results = 1;
    int32 total_count = 2;
}

message CollectorStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;     // required
    string domain_id = 2;                               // required
}

message VerifyInfo {
    bool status = 1;
}

// TODO: more fields
message JobInfo {
	enum State {
		NONE = 0;
		CREATED = 1;
		CANCELED = 2;
        IN_PROGRESS = 3;
        FINISHED = 4;
        FAILURE = 5;
        TIMEOUT = 6;
	}

    string domain_id = 1;
    string job_id = 2;
    State state = 3;
    int32 created_count = 4;
    int32 updated_count = 5;
    string collect_mode = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp finished_at = 8;
    CollectorInfo collector_info = 10;
    google.protobuf.Struct filter = 11;
    repeated string collected_resources = 20;
}

message Scheduled {
    string cron = 1;
    int32 interval = 2;
    repeated int32 minutes = 3;
    repeated int32 hours = 4;
}

message CreateScheduleRequest {
    string domain_id = 1;
    string collector_id = 2;
    string name = 3;
    string collect_mode = 4;
    Scheduled schedule = 5;
    google.protobuf.Struct filter = 6;
}

message UpdateScheduleRequest {
    string domain_id = 1;
    string schedule_id = 2;
    string collector_id = 3;
    string name = 4;
    string collect_mode = 5;
    Scheduled schedule = 6;
    google.protobuf.Struct filter = 7;
}

message ScheduleRequest {
    string domain_id = 1;
    string schedule_id = 2;
    string collector_id = 3;
}
message DeleteScheduleRequest {
    string domain_id = 1;
    string schedule_id = 2;
    string collector_id = 3;
}

message ScheduleQuery {
    spaceone.api.core.v1.Query query = 1;
	string collector_id = 2;
    string schedule_id = 3;
    string domain_id = 4;
}

message ScheduleInfo {
    string domain_id = 1;
    string schedule_id = 2;
    string name = 3;
    string collect_mode = 4;
    Scheduled schedule = 5;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp last_scheduled_at = 11;
    CollectorInfo collector_info = 20;
    google.protobuf.Struct filter = 21;
}

message SchedulesInfo {
    repeated ScheduleInfo results = 1;
    int32 total_count = 2;
}

