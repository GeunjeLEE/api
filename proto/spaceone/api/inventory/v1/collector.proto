syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Collector {
    rpc create (CreateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { post: "/inventory/v1/collectors" };
    }
    rpc update (UpdateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}" };
    }
    rpc update_plugin (UpdatePluginRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/plugin" };
    }
    rpc verify_plugin (VerifyPluginRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/plugin/verify" };
    }
    rpc delete (CollectorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/collector/{collector_id}" };
    }
    rpc get (GetCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}" };
    }
    rpc enable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/enable" };
    }
    rpc disable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/disable" };
    }
    rpc list (CollectorQuery) returns (CollectorsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/collectors"
            additional_bindings {
                post: "/inventory/v1/collectors/search"
            }
        };
    }
    rpc stat (CollectorStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/collectors/stat" };
    }
    rpc collect (CollectRequest) returns (JobInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/collect" };
    }
    rpc add_schedule (CreateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule" };
    }
    rpc get_schedule (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc update_schedule (UpdateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc delete_schedule (DeleteScheduleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete : "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    rpc list_schedules (ScheduleQuery) returns (SchedulesInfo) {
         option (google.api.http) = {
            get: "/inventory/v1/collector/{collector_id}/schedules"
            additional_bindings {
                post: "/inventory/v1/collector/{collector_id}/schedules/search"
            }
        };
    }
}

message PluginInfo {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    string secret_id = 4;
    string secret_group_id = 5;
    string provider = 6;
    string service_account_id = 7;
    google.protobuf.Struct metadata = 10;
    UpgradeMode upgrade_mode = 11;
}

message CreateCollectorRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    PluginInfo plugin_info = 2;
    // is_required: false
    int32  priority = 3;
    // is_required: false
    google.protobuf.Struct tags = 5;
    // is_required: true
    string domain_id = 6;
    // is_required: false
    // desc: default is true
    bool is_public = 10;
    // is_required: false
    // desc: if is_public is false, project_id is require
    // remained as is_public | True | False
    string project_id = 11;

}

message UpdateCollectorRequest {
    // is_required: true
	  string collector_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    // note: deprecated, use update_plugin
    PluginInfo plugin_info = 3;
    // is_required: false
    int32  priority = 4;
    // is_required: false
    google.protobuf.Struct tags = 6;
    // is_required: true
    string domain_id = 7;
}

message UpdatePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    // is_required: true
    string collector_id = 1;
    // is_required: false
    string version = 2;
    // is_required: false
    google.protobuf.Struct options = 3;
    // is_required: true
    string domain_id = 4;
    // is_required: false
    UpgradeMode upgrade_mode = 5;
}

message CollectorRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetCollectorRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: true
    string domain_id = 2;
	// is_required: false
    repeated string only = 3;
}

message CollectorQuery {
	enum State {
		NONE = 0;
		ENABLED = 1;
		DISABLED = 2;
	}

    spaceone.api.core.v1.Query query = 1;
	string collector_id = 2;
    string name = 3;
    State state = 4;
    int32 priority = 5;
    string plugin_id = 6;
    string domain_id = 7;
}

message CollectRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: false
    google.protobuf.Struct filter = 2;
    // is_required: false
    string secret_id = 3;
    // is_required: false
    string collect_mode = 4;
    // is_required: true
    string domain_id = 5;
    // is_required: false
    bool use_cache = 6;
}

message VerifyPluginRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: false
    string secret_id = 2;
    // is_required: true
    string domain_id = 3;
}
message CollectorInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

	  string collector_id = 1;
    string name = 2;
	  State state = 3;
    PluginInfo plugin_info = 4;
    int32  priority = 5;
    google.protobuf.Struct tags = 7;
    string created_at = 8;
    string last_collected_at = 9;
    string domain_id = 10;
    string provider = 11;
    google.protobuf.Struct capability = 12;
    bool is_public = 20;
    string project_id = 21;
}

message CollectorsInfo {
    repeated CollectorInfo results = 1;
    int32 total_count = 2;
}

message CollectorStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}

message VerifyInfo {
    bool status = 1;
}

message ErrorInfo {
    string error_code = 1;
    string message = 2;
    google.protobuf.Struct additional = 3;
}

message JobInfo {
    enum Status {
        NONE = 0;
        CREATED = 1;
        CANCELED = 2;
        IN_PROGRESS = 3;
        SUCCESS = 4;
        ERROR = 5;
        TIMEOUT = 6;
	}

    string job_id = 1;
    Status status = 2;
    google.protobuf.Struct filter = 3;
    int32 total_tasks = 4;
    int32 remained_tasks = 5;
    repeated ErrorInfo errors = 6;

    CollectorInfo collector_info = 11;
    string project_id = 12;
    string domain_id = 13;

    string created_at = 21;
    string updated_at = 22;
    string finished_at = 23;
}

message Scheduled {
    string cron = 1;
    int32 interval = 2;
    repeated int32 minutes = 3;
    repeated int32 hours = 4;
}

message CreateScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string collector_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string collect_mode = 4;
    // is_required: true
    Scheduled schedule = 5;
    // is_required: false
    google.protobuf.Struct filter = 6;
}

message UpdateScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
    // is_required: false
    string name = 4;
    // is_required: false
    string collect_mode = 5;
    // is_required: false
    Scheduled schedule = 6;
    // is_required: false
    google.protobuf.Struct filter = 7;
}

message ScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
}
message DeleteScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
}

message ScheduleQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: true
	string collector_id = 2;
    // is_required: false
    string schedule_id = 3;
    // is_required: true
    string domain_id = 4;
}

message ScheduleInfo {
    string domain_id = 1;
    string schedule_id = 2;
    string name = 3;
    string collect_mode = 4;
    Scheduled schedule = 5;
    string created_at = 10;
    string last_scheduled_at = 11;
    CollectorInfo collector_info = 20;
    google.protobuf.Struct filter = 21;
}

message SchedulesInfo {
    repeated ScheduleInfo results = 1;
    int32 total_count = 2;
}

