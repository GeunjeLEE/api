syntax = "proto3";

package spaceone.api.inventory.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/inventory/v1/region.proto";
import "spaceone/api/inventory/v1/zone.proto";


service Pool {
    rpc create (CreatePoolRequest) returns (PoolInfo) {
        option (google.api.http) = { post: "/inventory/v1/pools" };
    }
    rpc update (UpdatePoolRequest) returns (PoolInfo) {
        option (google.api.http) = { put: "/inventory/v1/pool/{pool_id}" };
    }
    rpc delete (PoolRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/pool/{pool_id}" };
    }
    rpc get (GetPoolRequest) returns (PoolInfo) {
        option (google.api.http) = { get: "/inventory/v1/pool/{pool_id}" };
    }
    rpc add_member (PoolMemberRequest) returns (PoolMemberInfo) {
        option (google.api.http) = { get: "/inventory/v1/pool/{pool_id}/members" };
    }
    rpc modify_member (PoolMemberRequest) returns (PoolMemberInfo) {
        option (google.api.http) = { get: "/inventory/v1/pool/{pool_id}/member/{user_id}" };
    }
    rpc remove_member (RemovePoolMemberRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { get: "/inventory/v1/pool/{pool_id}/member/{user_id}" };
    }
    rpc list_members (PoolMemberQuery) returns (PoolMembersInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/pool/{pool_id}/members"
            additional_bindings {
                post: "/inventory/v1/pool/{pool_id}/members/search"
            }
        };
    }
    rpc list (PoolQuery) returns (PoolsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/pools"
            additional_bindings {
                post: "/inventory/v1/pools/search"
            }
        };
    }
    rpc stat (PoolStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/pools/stat" };
    }
}

message CreatePoolRequest {
    /*
    is_required: true
    desc:
    */
    string name = 1;
    /*
    is_required: true
    desc:
    */
    string zone_id = 2;
    /*
    is_required: true
    desc:
    */
    string domain_id = 3;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 4;
}

message UpdatePoolRequest {
    /*
    is_required: true
    desc:
    */
    string pool_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
    /*
    is_required: false
    desc:
    */
    string name = 3;
    /*
    is_required: false
    desc:
    */
    google.protobuf.Struct tags = 4;
}

message PoolRequest {
    /*
    is_required: true
    desc:
    */
    string pool_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}

message GetPoolRequest {
    /*
    is_required: true
    desc:
    */
    string pool_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
    /*
    is_required: false
    desc:
    */
    repeated string only = 3;
}

message PoolQuery {
    /*
    is_required: false
    desc:
    */
    spaceone.api.core.v1.Query query = 1;
    /*
    is_required: false
    desc:
    */
    string pool_id = 2;
    /*
    is_required: false
    desc:
    */
    string region_id = 3;
    /*
    is_required: false
    desc:
    */
    string zone_id = 4;
    /*
    is_required: true
    desc:
    */
    string domain_id = 5;
    /*
    is_required: false
    desc:
    */
    string name = 6;
}

message PoolInfo {
    enum State {
        NONE = 0;
        ACTIVE = 1;
        DELETED = 2;
    }

    string pool_id = 1;
    string name = 2;
    State state = 3;
    google.protobuf.Struct tags = 4;
    string domain_id = 5;
    RegionInfo region_info = 6;
    ZoneInfo zone_info = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp deleted_at = 9;
}

message PoolsInfo {
    repeated PoolInfo results = 1;
    int32 total_count = 2;
}

message PoolMemberRequest {
    /*
    is_required: true
    desc:
    */
    string pool_id = 1;
    /*
    is_required: true
    desc:
    */
    string user_id = 2;
    /*
    is_required: false
    desc:
    */
    repeated string labels = 3;
    /*
    is_required: true
    desc:
    */
    string domain_id = 4;
}

message RemovePoolMemberRequest {
    /*
    is_required: true
    desc:
    */
    string pool_id = 1;
    /*
    is_required: true
    desc:
    */
    string user_id = 2;
    /*
    is_required: true
    desc:
    */
    string domain_id = 3;
}

message PoolMemberQuery {
    /*
    is_required: false
    desc:
    */
    spaceone.api.core.v1.Query query = 1;
    /*
    is_required: false
    desc:
    */
    string pool_id = 2;
    /*
    is_required: false
    desc:
    */
    string user_id = 3;
    /*
    is_required: true
    desc:
    */
    string domain_id = 4;
}

message PoolMemberInfo {
    PoolInfo pool_info = 1;
    google.protobuf.Struct user_info = 2;
    repeated string labels = 3;
}

message PoolMembersInfo {
    repeated PoolMemberInfo results = 1;
    int32 total_count = 2;
}

message PoolStatQuery {
    /*
    is_required: true
    desc:
    */
    spaceone.api.core.v1.StatisticsQuery query = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}