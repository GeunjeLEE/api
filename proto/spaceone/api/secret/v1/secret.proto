syntax = "proto3";

package spaceone.api.secret.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Secret {
    rpc create (CreateSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { post: "/secret/v1/secrets" };
    }
    rpc update (UpdateSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { put: "/secret/v1/secret/{secret_id}" };
    }
    rpc delete (SecretRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/secret/v1/secret/{secret_id}" };
    }
    rpc get_data (SecretRequest) returns (SecretDataInfo) {
        option (google.api.http) = { get: "/secret/v1/secret/{secret_id}/get-data" };
    }
    rpc get (GetSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { get: "/secret/v1/secret/{secret_id}" };
    }
    rpc list (SecretQuery) returns (SecretsInfo) {
        option (google.api.http) = {
            get: "/secret/v1/secrets"
            additional_bindings {
                post: "/secret/v1/secrets/search"
            }
        };
    }
    rpc stat (SecretStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/secret/v1/secrets/stat" };
    }
}

enum SecretType {
    NONE = 0;
    CREDENTIALS = 1;
}

message CreateSecretRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    google.protobuf.Struct data = 2;
    // is_required: true
    SecretType secret_type = 3;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: false
    string schema = 5;
    // is_required: false
    string service_account_id = 6;
    // is_required: false
    string project_id = 7;
    // is_required: true
    string domain_id = 8;
}

message UpdateSecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct tags = 3;
    // is_required: false
    string project_id = 4;
    // is_required: true
    string domain_id = 5;
    // is_required: false
    bool release_project = 6;
}

message SecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetSecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message SecretQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string secret_id = 2;
    /// is_required: false
    string name = 3;
    // is_required: false
    SecretType secret_type = 4;
    // is_required: false
    string secret_group_id = 5;
    // is_required: false
    string schema= 6;
    // is_required: false
    string provider = 7;
    // is_required: false
    string service_account_id = 8;
    // is_required: false
    bool include_secret_group = 9;
    // is_required: true
    string domain_id = 10;
}

message SecretDataInfo {
    google.protobuf.Struct data = 1;
}

message SecretInfo {
    string secret_id = 1;
    string name = 2;
    SecretType secret_type = 3;
    google.protobuf.ListValue secret_groups = 4;
    google.protobuf.Struct tags = 5;
    string schema = 6;
    string provider = 7;
    string service_account_id = 8;
    string project_id = 9;
    string domain_id = 10;
    google.protobuf.Timestamp created_at = 11;
}

message SecretsInfo {
    repeated SecretInfo results = 1;
    int32 total_count = 2;
}

message SecretStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}