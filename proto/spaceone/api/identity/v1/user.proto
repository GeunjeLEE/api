/*
desc: User API which allows member management within project, company, and domain
note: Administrator must register User first.
 */
syntax = "proto3";

package spaceone.api.identity.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/identity/v1/role.proto";


service User {
    rpc create (CreateUserRequest) returns (UserInfo) {
        option (google.api.http) = { post: "/identity/v1/users" };
    }
    /*
    desc: Update user info by given user_id
    note:
    request_example: >-
      {
	      "user_id": "dkang@mz.co.kr",
        "tags": {
            "user1": "Reuters",
            "user2": "Bloomberg"
        },
	      "domain_id": "{{DOMAIN_ID}}"
      }
    response_example: >-
      {
        "roles": [],
        "user_id": "dkang@mz.co.kr",
        "name": "Dong Yoo kang",
        "state": "ENABLED",
        "email": "dkang@mz.co.kr",
        "mobile": "",
        "group": "",
        "language": "en",
        "timezone": "UTC",
        "tags": {
            "user1": "Reuters",
            "user2": "Bloomberg"
        },
        "last_accessed_at": {
            "seconds": "1593161630",
            "nanos": 79000000
        },
        "created_at": {
            "seconds": "1593161630",
            "nanos": 79000000
        },
        "domain_id": "domain-fd6e23a5ae36"
      }
    */
    rpc update (UpdateUserRequest) returns (UserInfo) {
        option (google.api.http) = { put: "/identity/v1/users" };
    }
    rpc enable (UserRequest) returns (UserInfo) {
        option (google.api.http) = { put: "/identity/v1/user/{user_id}/enable" };
    }
    rpc disable (UserRequest) returns (UserInfo) {
        option (google.api.http) = { put: "/identity/v1/user/{user_id}/disable" };
    }
    rpc update_role (UpdateUserRoleRequest) returns (UserInfo) {
        option (google.api.http) = { put: "/identity/v1/user/{user_id}/roles" };
    }
    rpc delete (UserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/identity/v1/users" };
    }
    rpc get (GetUserRequest) returns (UserInfo) {
        option (google.api.http) = { get: "/identity/v1/user/{user_id}" };
    }
    rpc list (UserQuery) returns (UsersInfo) {
        option (google.api.http) = {
            get: "/identity/v1/users"
            additional_bindings {
                post: "/identity/v1/users/search"
            }
        };
    }
    rpc stat (UserStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/identity/v1/users/stat" };
    }
    rpc find (FindUserQuery) returns (FindUsersInfo) {
        option (google.api.http) = { post: "/identity/v1/users/find" };
    }
    rpc sync (UserRequest) returns (UserInfo) {
        option (google.api.http) = { post: "/identity/v1/users/sync" };
    }
}

message CreateUserRequest {
    string user_id = 1;                 // required
    string password = 2;                // optional
    string name = 3;                    // optional
    string email = 4;                   // optional
    string mobile = 5;                  // optional
    string group = 6;                   // optional
    string language = 7;                // optional
    string timezone = 8;                // optional
    google.protobuf.Struct tags = 9;    // optional
    string domain_id = 10;              // optional
}

message UserInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
        UNIDENTIFIED = 3;
    }

    string user_id = 1;
    string name = 2;
    State state = 3;
    string email = 4;
    string mobile = 5;
    string group = 6;
    string language = 7;
    string timezone = 8;
    repeated spaceone.api.identity.v1.RoleInfo roles = 9;
    google.protobuf.Struct tags = 10;
    google.protobuf.Timestamp last_accessed_at = 11;
    google.protobuf.Timestamp created_at = 12;
    string domain_id = 13;
}

message UpdateUserRequest {
    string user_id = 1;
    string password = 2;
    string name = 3;
    string email = 4;
    string mobile = 5;
    string group = 6;
    string language = 7;
    string timezone = 8;
    google.protobuf.Struct tags = 9;
    string domain_id = 10;
}

message UpdateUserRoleRequest {
    string user_id = 1;
    google.protobuf.ListValue roles = 2;
    string domain_id = 3;
}

message UserRequest {
    /*
    is_required: true
    desc:
    */
    string user_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}

message GetUserRequest {
    /*
    is_required: true
    desc:
    */
    string user_id = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
    /*
    is_required: false
    desc:
    */
    repeated string only = 3;
}

message UserQuery {
    /*
    is_required: false
    desc:
    */
    spaceone.api.core.v1.Query query = 1;
    /*
    is_required: false
    desc:
    */
    string user_id = 2;
    /*
    is_required: false
    desc:
    */
    string name = 3;
    /*
    is_required: false
    desc:
    */
    string state = 4;
    /*
    is_required: false
    desc:
    */
    string email = 5;
    /*
    is_required: false
    desc:
    */
    string mobile = 6;
    /*
    is_required: false
    desc:
    */
    string group = 7;
    /*
    is_required: false
    desc:
    */
    string role_id = 8;
    /*
    is_required: false
    desc:
    */
    string project_id = 9;
    /*
    is_required: false
    desc:
    */
    string project_group_id = 10;
    /*
    is_required: false
    desc:
    */
    string domain_id =11;
}

message UsersInfo {
    repeated UserInfo results = 1;
    int32 total_count = 2;
}

message UserStatQuery {
    /*
    is_required: true
    desc:
    */
    spaceone.api.core.v1.StatisticsQuery query = 1;
    /*
    is_required: true
    desc:
    */
    string domain_id = 2;
}

message FindUserSearch {
    oneof search_alias {
        string user_id = 1;
        string keyword = 2;
    }
}

message FindUserQuery {
    FindUserSearch search = 1;
    string domain_id = 2;
}

message FindUserInfo {
    string user_id = 1;
    string name = 2;
    string email = 3;
    string mobile = 4;
    string group = 5;
    string state = 6;
}

message FindUsersInfo {
    repeated FindUserInfo results = 1;
    int32 total_count = 2;
}
